// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package sut.se.enterprise.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import sut.se.enterprise.domain.Enterprise;

privileged aspect Enterprise_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Enterprise.entityManager;
    
    public static final EntityManager Enterprise.entityManager() {
        EntityManager em = new Enterprise().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Enterprise.countEnterprises() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Enterprise o", Long.class).getSingleResult();
    }
    
    public static List<Enterprise> Enterprise.findAllEnterprises() {
        return entityManager().createQuery("SELECT o FROM Enterprise o", Enterprise.class).getResultList();
    }
    
    public static Enterprise Enterprise.findEnterprise(Long id) {
        if (id == null) return null;
        return entityManager().find(Enterprise.class, id);
    }
    
    public static List<Enterprise> Enterprise.findEnterpriseEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Enterprise o", Enterprise.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Enterprise.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Enterprise.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Enterprise attached = Enterprise.findEnterprise(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Enterprise.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Enterprise.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Enterprise Enterprise.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Enterprise merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
